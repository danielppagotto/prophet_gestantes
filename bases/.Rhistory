summary(modelo)
modelo <- lm(tea ~ corruption + continent +
regulatory_quality  + voice_accountability +
rule_of_law + political_stability,
data = gem_wgid)
summary(modelo)
modelo <- lm(tea ~ corruption + continent +
regulatory_quality  +
rule_of_law + political_stability,
data = gem_wgid)
summary(modelo)
modelo <- lm(perceived_opportunities ~ corruption + continent +
regulatory_quality  +
rule_of_law + political_stability,
data = gem_wgid)
summary(modelo)
modelo <- lm(entrepreneurship_as_good ~ corruption + continent +
regulatory_quality  +
rule_of_law + political_stability,
data = gem_wgid)
modelo <- lm(entrepreneurship_as_good_carrer_choice ~ corruption + continent +
regulatory_quality  +
rule_of_law + political_stability,
data = gem_wgid)
summary(modelo)
modelo <- lm(entrepreneurship_as_good_carrer_choice ~ corruption + continent +
regulatory_quality  +
rule_of_law ,
data = gem_wgid)
summary(modelo)
modelo <- lm(entrepreneurship_as_good_carrer_choice ~  + continent +
regulatory_quality  +
rule_of_law ,
data = gem_wgid)
summary(modelo)
modelo <- lm(entrepreneurship_as_good_carrer_choice ~ corruption + continent +
+
rule_of_law ,
data = gem_wgid)
summary(modelo)
modelo <- lm(entrepreneurship_as_good_carrer_choice ~ corruption + continent +
rule_of_law , data = gem_wgid)
summary(modelo)
modelo <- lm(tea ~ corruption + continent +
rule_of_law , data = gem_wgid)
summary(modelo)
modelo <- lm(entrepreneurship_as_good_carrer_choice ~ corruption + continent +
rule_of_law , data = gem_wgid)
summary(modelo)
gvlma::gvlma.lm(modelo)
#Juntando bases
gem_wgid <- gem_aps %>%
left_join(wgidataset, by = c("abrev" = "code"))
modelo <- lm(high_job_creation_expectation ~ corruption + continent +
rule_of_law , data = gem_wgid)
summary(modelo)
gvlma::gvlma.lm(modelo)
modelo <- lm(female_male_tea ~ corruption + continent +
rule_of_law , data = gem_wgid)
summary(modelo)
gvlma::gvlma.lm(modelo)
plot(modelo)
modelo <- lm(female_male_tea ~ corruption + continent +
rule_of_law + political_stability, data = gem_wgid)
summary(modelo)
gvlma::gvlma.lm(modelo)
plot(modelo)
modelo <- lm(female_male_tea ~ corruption + continent +
rule_of_law + regulatory_quality, data = gem_wgid)
summary(modelo)
modelo <- lm(female_male_tea ~ corruption + continent +
rule_of_law , data = gem_wgid)
summary(modelo)
gvlma::gvlma.lm(modelo)
modelo <- lm(female_male_tea ~ corruption, data = gem_wgid)
summary(modelo)
gvlma::gvlma.lm(modelo)
modelo <- lm(female_male_tea ~ corruption + continent
, data = gem_wgid)
summary(modelo)
gvlma::gvlma.lm(modelo)
modelo <- lm(female_male_tea ~ corruption + continent +
rule_of_law , data = gem_wgid)
summary(modelo)
gvlma::gvlma.lm(modelo)
plot(modelo)
modelo <- lm(female_male_tea ~ corruption + continent +
rule_of_law + gov_effectiveness, data = gem_wgid)
summary(modelo)
gvlma::gvlma.lm(modelo)
modelo <- lm(female_male_tea ~ corruption + continent +
rule_of_law + political_stability, data = gem_wgid)
summary(modelo)
gvlma::gvlma.lm(modelo)
plot(modelo)
modelo <- lm(female_male_tea ~ corruption + continent +
rule_of_law + voice_accountability, data = gem_wgid)
summary(modelo)
gvlma::gvlma.lm(modelo)
gem_especialistas_2019 <- gem_especialistas %>%
filter(year == 2019)
#Juntando bases
gem_wgid <- gem_aps %>%
left_join(wgidataset, by = c("abrev" = "code")) %>%
left_join(gem_especialistas_2019, by = "cod_pais")
#Juntando bases
gem_wgid <- gem_aps %>%
left_join(wgidataset, by = c("abrev" = "code")) %>%
left_join(gem_especialistas_2019, by = "code")
#Juntando bases
gem_wgid <- gem_aps %>%
left_join(wgidataset, by = c("abrev" = "code")) %>%
left_join(gem_especialistas_2019, by = c("code" = "cod_pais"))
gem_wgid <- gem_aps %>%
left_join(wgidataset, by = c("abrev" = "code"))
gem_wgid%>%
left_join(gem_especialistas_2019, by = c("code" = "cod_pais"))
gem_wgid%>%
left_join(gem_especialistas_2019, by = c("cod_pais" = "code"))
total <- gem_wgid%>%
left_join(gem_especialistas_2019, by = c("cod_pais" = "code"))
View(total)
modelo <- lm(female_male_tea ~ corruption + taxes_bureaucracy +
rule_of_law +  , data = total)
modelo <- lm(female_male_tea ~ corruption + taxes_bureaucracy +
rule_of_law  , data = total)
summary(modelo)
modelo <- lm(female_male_tea ~ gov_programs + taxes_bureaucracy +
gov_support + basic_school_entrepreneurship  , data = total)
summary(modelo)
modelo <- lm(female_male_tea ~ gov_programs + taxes_bureaucracy +
gov_support + , data = total)
modelo <- lm(female_male_tea ~ gov_programs + taxes_bureaucracy +
gov_support , data = total)
summary(modelo)
modelo <- lm(female_male_tea ~ gov_programs + taxes_bureaucracy +
gov_support + financing , data = total)
summary(modelo)
modelo <- lm(female_male_tea ~ gov_programs + taxes_bureaucracy +
gov_support + financing + continent , data = total)
summary(modelo)
modelo <- lm(tea ~ gov_programs + taxes_bureaucracy +
gov_support + financing + continent , data = total)
summary(modelo)
summary(modelo)
gvlma::gvlma.lm(modelo)
modelo <- lm(high_status_successful_entrepreneurs ~ gov_programs + taxes_bureaucracy +
gov_support + financing + continent , data = total)
summary(modelo)
gvlma::gvlma.lm(modelo)
modelo <- lm(high_job_creation_expectation ~ gov_programs + taxes_bureaucracy +
gov_support + financing + continent , data = total)
summary(modelo)
gvlma::gvlma.lm(modelo)
modelo <- lm(fear_failure ~ gov_programs + taxes_bureaucracy +
gov_support + financing + continent , data = total)
summary(modelo)
modelo <- lm(fear_failure ~ gov_programs + taxes_bureaucracy +
gov_support + financing + physical_infrastructure + continent , data = total)
summary(modelo)
modelo <- lm(female_male_tea ~ gov_programs + taxes_bureaucracy +
gov_support + financing + physical_infrastructure +
continent , data = total)
summary(modelo)
gvlma::gvlma.lm(modelo)
modelo <- lm(female_male_tea ~ gov_programs + taxes_bureaucracy +
gov_support + financing + physical_infrastructure +
, data = total)
modelo <- lm(female_male_tea ~ gov_programs + taxes_bureaucracy +
gov_support + financing + physical_infrastructure, data = total)
summary(modelo)
modelo <- lm(female_male_tea ~ gov_programs + taxes_bureaucracy +
gov_support + physical_infrastructure +
continent , data = total)
summary(modelo)
library(tidyverse)
library(devtools)
library(ggplot2)
library(survey)
library(PNSIBGE)
# Definindo opcao de exibicao de numeros sem exponencial
aviso <- getOption("warn")
options(warn=-1)
options(scipen=999)
options(warn=aviso)
rm(aviso)
# Limpando arquivos armazenados na memoria
rm(list=ls(all=TRUE))
variaveis_selecionadas <- c("Q00201", "Q03001", "P00404", "P00104", "N00101", "N001","J012", "J01101", "J01002", "J007", "J00101", "J001",
"J00404", "I00102", "J002", "B001", "B003", "C006","C008","C009", "E01602","E01501", "E01601",
"E017", "V0001", "V0015", "V0031", "B001", "C001", "C00301", "C004", "C006", "C008", "C009", "D00901",
"E001", "E002", "E003", "E004", "E005", "E006011", "E008", "E01201", "E01401", "E014011",
"E01402", "E01403", "E01501", "E01601", "E01602", "E017", "E01801", "E01802", "E01805",
"E019", "E022", "E023011", "E024011", "I00102", "I005", "I006", "I00401", "I00402", "I00403",
"I00404", "J001", "J00101", "J00402", "J00404", "J007", "J00801", "J009", "J01002", "J01101",
"J012", "J037", "J038", "J041", "J05301", "J057", "J01301", "N010", "N011", "N012", "N013", "N014", "N015", "N016",
"N017", "N018", "Q092", "Q09201", "Q09301", "Q094", "Q09502", "Q09605", "Q09606", "Q10101",
"Q10202", "Q105", "Q10701", "Q109", "Q11006", "Q11007", "Q11008", "Q11009", "Q11010", "Q111",
"Q11201", "Q11406", "Q11408", "Q115", "P02801", "P03001", "P035", "P050", "P067", "P052", "P05401",
"Q060", "Q06306", "Q068", "Q074", "Q079", "Q088", "Q11604", "Q120", "Q124", "VDD004A")
dadospns <- get_pns(year=2019, labels=TRUE, deflator=TRUE, design=TRUE, vars=variaveis_selecionadas)
tpc <- subset(dadospns, E01401 == "Conta própria")
empregador <- subset(dadospns, E01401 == "Empregador")
empregado <- subset(dadospns, E01403 == "Sim")
tpc_sul <- subset(tpc, V0001 == "Paraná" | V0001 == "Santa Catarina" | V0001 == "Rio Grande do Sul")
tpc_norte <- subset(tpc, V0001 == "Rondônia" | V0001 == "Acre" | V0001 == "Amazonas" | V0001 == "Roraima" |
V0001 == "Pará" | V0001 == "Amapá" | V0001 == "Tocantins")
tpc_nordeste <- subset(tpc, V0001 == "Maranhão" | V0001 == "Piauí" | V0001 == "Ceará" |
V0001 == "Rio Grande do Norte" | V0001 == "Paraíba" | V0001 == "Pernambuco" |
V0001 == "Alagoas" | V0001 == "Sergipe" | V0001 == "Bahia")
tpc_sudeste <- subset(tpc, V0001 == "Minas Gerais" | V0001 == "Espírito Santo" | V0001 == "Rio de Janeiro" |
V0001 == "São Paulo")
tpc_centro_oeste <- subset(tpc, V0001 == "Mato Grosso do Sul" | V0001 == "Mato Grosso" | V0001 == "Goiás" |
V0001 == "Distrito Federal")
empregado <- subset(dadospns, E01401 == "Empregado do setor privado") # aqui tem que pegar
View(empregado)
empregado_sul <- subset(empregado, V0001 == "Paraná" | V0001 == "Santa Catarina" | V0001 == "Rio Grande do Sul")
empregado_norte <- subset(empregado, V0001 == "Rondônia" | V0001 == "Acre" | V0001 == "Amazonas" | V0001 == "Roraima" |
V0001 == "Pará" | V0001 == "Amapá" | V0001 == "Tocantins")
empregado_nordeste <- subset(empregado, V0001 == "Maranhão" | V0001 == "Piauí" | V0001 == "Ceará" |
V0001 == "Rio Grande do Norte" | V0001 == "Paraíba" | V0001 == "Pernambuco" |
V0001 == "Alagoas" | V0001 == "Sergipe" | V0001 == "Bahia")
empregado_sudeste <- subset(empregado, V0001 == "Minas Gerais" | V0001 == "Espírito Santo" | V0001 == "Rio de Janeiro" |
V0001 == "São Paulo")
empregado_centro_oeste <- subset(empregado, V0001 == "Mato Grosso do Sul" | V0001 == "Mato Grosso" | V0001 == "Goiás" |
V0001 == "Distrito Federal")
htpc <- subset(tpc, C006 == "Homem")
mtpc <- subset(tpc, C006 == "Mulher")
#Empregador
hempregador <- subset(empregador, C006 == "Homem")
mempregador <- subset(empregador, C006 == "Mulher")
#Empregado
hempregado <- subset(empregado, C006 == "Homem")
mempregado <- subset(empregado, C006 == "Mulher")
id1_sul_tpc <- svymean(~J01101, tpc_sul, na.rm = TRUE)
id1_sul_tpc
id2tpc_goias <- svymean(~J01301, tpc_goias, na.rm = TRUE)
id2tpc_goias
tpc_sem_instrucao <- subset(tpc, VDD004A == "Sem instrução")
tpc_fund_incomp <- subset(tpc, VDD004A == "Fundamental incompleto ou equivalente")
tpc_fund_comp <- subset(tpc, VDD004A == "Fundamental completo ou equivalente")
tpc_medio_incomp <- subset(tpc, VDD004A == "Médio incompleto ou equivalente")
tpc_medio_comp <- subset(tpc, VDD004A == "Médio completo ou equivalente")
tpc_sup_incomp <- subset(tpc, VDD004A == "Superior incompleto ou equivalente")
tpc_sup_comp <- subset(tpc, VDD004A == "Superior completo")
dadospns_df <- as.data.frame(dadospns)
View(tpc_sem_instrucao)
library(ggrepel)
library(srvyr); library(tidyverse); library(vroom); library(readxl); library(patchwork);
tipotrabalho_sexo <- dadospns %>%
group_by(E01401, C006) %>%
summarise(proportion_sexo = survey_mean(),
total = survey_total())
teste <- as_survey_design(dadospns)
tipotrabalho_sexo <- teste %>%
group_by(E01401, C006) %>%
summarise(proportion_sexo = survey_mean(),
total = survey_total())
View(tipotrabalho_sexo)
tipotrabalho_sexo <- teste %>%
filter(E01401 == "Empregador" | E01401 == "Empregado do setor privado"|
E01401 == "Conta própria") %>%
group_by(E01401, C006) %>%
summarise(proportion_sexo = survey_mean(),
total = survey_total())
View(tipotrabalho_sexo)
View(teste)
tipotrabalho_sexo2 <- teste %>%
filter(E01401 == "Empregador" | E01401 == "Empregado do setor privado"|
E01401 == "Conta própria") %>%
group_by(E01401, C006) %>%
summarise(proportion_sexo = survey_mean(),
total = survey_total())
tipotrabalho_sexo_uf <- teste %>%
filter(E01401 == "Empregador" | E01401 == "Empregado do setor privado"|
E01401 == "Conta própria") %>%
group_by(V001, E01401, C006) %>%
summarise(proportion_sexo = survey_mean(),
total = survey_total())
tipotrabalho_sexo_uf <- teste %>%
filter(E01401 == "Empregador" | E01401 == "Empregado do setor privado"|
E01401 == "Conta própria") %>%
group_by(V0001, E01401, C006) %>%
summarise(proportion_sexo = survey_mean(),
total = survey_total())
View(tipotrabalho_sexo2)
tipotrabalho_sexo2 <- teste %>%
group_by(E01401, C006) %>%
summarise(proportion_sexo = survey_mean(),
total = survey_total()) %>%
filter(E01401 == "Empregador" | E01401 == "Empregado do setor privado"|
E01401 == "Conta própria")
View(tipotrabalho_sexo2)
install.packages("sparklyr")
library(sparklyr)
spark_install(version = "2.1.0")
sc <- spark_connect(master = "local")
sc <- spark_connect(master = "local")
sc <- spark_connect(master = "local")
spark_installed_versions()
sc <- spark_connect(master = "local", version = "2.1.0")
sc <- spark_connect(master = "local", log = "console",
config = list(sparklyr.verbose = TRUE))
spark_home <- Sys.getenv("SPARK_HOME")
spark_home <- sparklyr::spark_home_dir()
system2(
file.path(spark_home, "bin", "spark-submit"),
c(
"--master", "local",
"--class", "org.apache.spark.examples.SparkPi",
dir(file.path(spark_home, "examples", "jars"),
pattern = "spark-examples", full.names = TRUE),
100),
stderr = FALSE
)
dir(system.file("java", package = "sparklyr"),
pattern = "sparklyr", full.names = T)
sc <- spark_connect(master = "sparklyr://localhost:8880/42", version = "2.3")
sc <- spark_connect(master = "local", version = "2.3")
sc <- spark_connect(master = "local", version = "2.1.0")
library(sparklyr)
sc <- spark_connect(master = "local", version = "2.1.0")
reticulate::repl_python()
import pyodbc, pandas
!pip install pyodbc
!pip install pyodbc
!apt-get -qq install -y pyodbc
!pip install pyodbc
dremio_host = "200.137.215.27"
dremio_port = "31010"
dremio_uid = "daniel"
dremio_pwd = "p7USWgsqaEH3CWe"
driver = "Dremio Connector"
cnxn = pyodbc.connect("Driver={};ConnectionType=Direct;HOST={};PORT={};AuthenticationType=Plain;UID={};PWD={}".format(driver, dremio_host,dremio_port,dremio_uid,dremio_pwd),
autocommit=True)
sql = '''SELECT CODMUNRES, competencia AS ANO, TO_DATE(DTNASC, 'DDMMYYYY') AS DIA_NASCIMENTO, COUNT(*) AS NASCIMENTOS
FROM Dados.sinasc.DN
dataframe = pandas.read_sql(sql,cnxn)
dataframe.head()
library(haven)
NE_AGG_020_SPSS_22MAR18 <- read_sav("LAPEI/PSED/NE_AGG_020_SPSS_22MAR18.SAV")
View(NE_AGG_020_SPSS_22MAR18)
microdatasus::fetch_datasus(year_start = 2019, month_start = 1, year_end = 2019,
month_end = 1, uf = "RR", information_system = "CNES-PF")
library(tidyverse); library(lubridate); library(modeltime); library(tidymodels)
library(timetk)
setwd("~/GitHub/prophet_gestantes/bases")
nascimentos <- read_csv("nascimentos.csv") %>% select(-X1) %>% janitor::clean_names()
oferta <- read_csv("dados_oferta_profissionais_gestantes.csv")
View(oferta)
oferta <- read_csv("dados_oferta_profissionais_gestantes.csv") %>%
group_by(ano, mes, nivel_atencao, categoria) %>%
summarise(CH_total = sum(FTE),
FTE_40 = CH_total/40)
View(oferta)
oferta <- read_csv("dados_oferta_profissionais_gestantes.csv") %>%
group_by(ano, nivel_atencao, categoria) %>%
summarise(CH_total = sum(FTE),
FTE_40 = CH_total/40)
View(oferta)
oferta <- read_csv("dados_oferta_profissionais_gestantes.csv") %>%
group_by(ano, nivel_atencao, categoria) %>%
summarise(CH_total = (sum(FTE) * 0.12),
FTE_40 = CH_total/40)
View(oferta)
oferta %>%
ggplot(aes(ano, FTE_40)) + geom_line()
oferta %>%
ggplot(aes(ano, FTE_40, col = nivel_atencao)) + geom_line() +
facet_wrap(~categoria)
library(tidyverse); library(lubridate); library(modeltime); library(tidymodels)
library(timetk)
setwd("~/GitHub/prophet_gestantes/bases")
nascimentos <- read_csv("nascimentos.csv") %>% select(-X1) %>% janitor::clean_names()
nascimentos$dtnasc <- dmy(nascimentos$dtnasc)
# nascimentos$mes_ano <- zoo::as.yearmon(nascimentos$dtnasc, "%Y %m")
nascimentos$mes_ano <- as.Date(format(nascimentos$dtnasc, "%Y-%m"))
nascimentos_go <- nascimentos %>%
filter(dtnasc < "2021-10-01") %>%
group_by(uf, dtnasc) %>%
summarise(total = sum(contagem))
nascimentos_go %>%
ggplot(aes(x = mes_ano, y = total)) + geom_line(size = 0.60) +
theme_minimal()
nascimentos_go %>%
plot_time_series(dtnasc, total)
# split e prophet ---------------------------------------------------------
splits <- time_series_split(
nascimentos_go,
assess = "6 months",
cumulative = TRUE
)
splits %>%
tk_time_series_cv_plan() %>%
plot_time_series_cv_plan(dtnasc, total)
splits
# modelos -----------------------------------------------------------------
model_arima <- arima_reg() %>%
set_engine("auto_arima") %>%
fit(total ~ dtnasc, training(splits))
model_prophet <- prophet_reg(seasonality_yearly = TRUE) %>%
set_engine("prophet") %>%
fit(total ~ dtnasc, training(splits))
model_fit_ets <- exp_smoothing() %>%
set_engine(engine = "ets") %>%
fit(total ~ dtnasc, data = training(splits))
model_tbl <- modeltime_table(
model_arima,
model_prophet,
model_fit_ets
)
# Calibrate ---------------------------------------------------------------
calib_tbl <- model_tbl %>%
modeltime_calibrate(testing(splits))
calib_tbl %>% modeltime_accuracy()
prophet_treino <- calib_tbl[[5]][[2]]
prophet_treino %>%
ggplot(aes(x = dtnasc)) + geom_line(aes(y = .actual), col = "blue") +
geom_line(aes(y = .prediction), col = "red") + theme_minimal()
# test set visualization --------------------------------------------------
calib_tbl %>%
modeltime_forecast(
new_data = testing(splits),
actual_data = nascimentos_go
) %>%
plot_modeltime_forecast(.conf_interval_show = FALSE)
future_forecast_tbl <- calib_tbl %>%
modeltime_refit(nascimentos_go) %>%
modeltime_forecast(h = "42 months",
actual_data = nascimentos_go)
future_forecast_tbl %>%
plot_modeltime_forecast(.conf_interval_show = FALSE)
future_forecast_tbl %>%
filter(.model_desc == "PROPHET" | .model_desc == "ACTUAL") %>%
filter(.index > "2019-01-01") %>%
ggplot(aes(x = .index, y = .value, col = .key)) + geom_line() +
theme_minimal()
# previsao do numero nascimentos -----------------------------------------------
total_nascimentos_previsao <-
future_forecast_tbl %>%
filter(.key == "prediction" & .model_desc == "PROPHET") %>%
mutate(mes_ano = format(.index, "%Y-%m")) %>%
mutate(ano = year(.index)) %>%
group_by(mes_ano, ano) %>%
summarise(total = sum(.value)) %>%
mutate(tipo = "previsão")
total_nascimentos_atual_recente <-
future_forecast_tbl %>%
filter(.index > "2015-01-01") %>%
filter(.key == "actual") %>%
mutate(mes_ano = format(.index, "%Y-%m")) %>%
mutate(ano = year(.index)) %>%
group_by(mes_ano, ano) %>%
summarise(total = sum(.value)) %>%
mutate(tipo = "atual")
total_nascimentos %>%
ggplot(aes(mes_ano, total,  group = 1, col = tipo)) + geom_line() +
theme_minimal() + theme(axis.text.x = element_text(angle = 90, vjust = 0.5, hjust=1))
total_nascimentos_previsao <-
future_forecast_tbl %>%
filter(.key == "prediction" & .model_desc == "PROPHET") %>%
mutate(mes_ano = format(.index, "%Y-%m")) %>%
mutate(ano = year(.index)) %>%
group_by(mes_ano, ano) %>%
summarise(total = sum(.value)) %>%
mutate(tipo = "previsão")
total_nascimentos_atual_recente <-
future_forecast_tbl %>%
filter(.index > "2015-01-01") %>%
filter(.key == "actual") %>%
mutate(mes_ano = format(.index, "%Y-%m")) %>%
mutate(ano = year(.index)) %>%
group_by(mes_ano, ano) %>%
summarise(total = sum(.value)) %>%
mutate(tipo = "atual")
total_nascimentos %>%
ggplot(aes(mes_ano, total,  group = 1, col = tipo)) + geom_line() +
theme_minimal() + theme(axis.text.x = element_text(angle = 90, vjust = 0.5, hjust=1))
total_nascimentos <- rbind(total_nascimentos_atual_recente, total_nascimentos_previsao)
total_nascimentos %>%
ggplot(aes(mes_ano, total,  group = 1, col = tipo)) + geom_line() +
theme_minimal() + theme(axis.text.x = element_text(angle = 90, vjust = 0.5, hjust=1))
calib_tbl %>% modeltime_accuracy()
nascimentos_go %>%
ggplot(aes(x = mes_ano, y = total)) + geom_line(size = 0.60) +
theme_minimal()
nascimentos_go %>%
plot_time_series(dtnasc, total)
splits <- time_series_split(
nascimentos_go,
assess = "6 months",
cumulative = TRUE
)
calib_tbl %>% modeltime_accuracy()
calib_tbl %>%
modeltime_forecast(
new_data = testing(splits),
actual_data = nascimentos_go
) %>%
plot_modeltime_forecast(.conf_interval_show = FALSE)
future_forecast_tbl %>%
plot_modeltime_forecast(.conf_interval_show = FALSE)
total_nascimentos %>%
ggplot(aes(mes_ano, total,  group = 1, col = tipo)) + geom_line() +
theme_minimal() + theme(axis.text.x = element_text(angle = 90, vjust = 0.5, hjust=1))
oferta <- read_csv("dados_oferta_profissionais_gestantes.csv") %>%
group_by(ano, nivel_atencao, categoria) %>%
summarise(CH_total = (sum(FTE) * 0.12),
FTE_40 = CH_total/40)
oferta %>%
ggplot(aes(ano, FTE_40, col = nivel_atencao)) + geom_line() +
facet_wrap(~categoria)
