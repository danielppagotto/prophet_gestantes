geom_line(aes(x=date,y=.prediction, color = "darkred")) + theme_bw() +
ggtitle("Nascimentos previstos e atual") + labs(y ="Nascimentos(previstos vs atual)")
plotly::ggplotly(arima_plot)
arima_plot <- arima %>%
ggplot() +
geom_line(aes(x=date,y=.actual, color = "darkblue")) +
geom_line(aes(x=date,y=.prediction, color = "darkred")) + theme_bw() +
ggtitle("Nascimentos previstos e atual") + labs(y ="Nascimentos(previstos vs atual)") +
scale_fill_discrete(name = "tipo", labels = c("Previsto","Atual"))
plotly::ggplotly(arima_plot)
arima_plot <- arima %>%
ggplot() +
geom_line(aes(x=date,y=.actual, color = "darkblue")) +
geom_line(aes(x=date,y=.prediction, color = "darkred")) + theme_bw() +
ggtitle("Nascimentos previstos e atual") + labs(y ="Nascimentos(previstos vs atual)") +
scale_linetype_discrete(name = "tipo", labels = c("Previsto","Atual"))
plotly::ggplotly(arima_plot)
arima_plot <- arima %>%
ggplot() +
geom_line(aes(x=date,y=.actual, color = "darkblue")) +
geom_line(aes(x=date,y=.prediction, color = "darkred")) + theme_bw() +
ggtitle("Nascimentos previstos e atual") + labs(y ="Nascimentos(previstos vs atual)") +
scale_color_manual(name = "tipo", labels = c("atual", "previsto"), values = c("darkblue", "darkred"))
plotly::ggplotly(arima_plot)
arima_plot <- arima %>%
ggplot() +
geom_line(aes(x=date,y=.actual, color = "darkblue")) +
geom_line(aes(x=date,y=.prediction, color = "darkred")) + theme_bw() +
ggtitle("Nascimentos previstos e atual") + labs(y ="Nascimentos(previstos vs atual)") +
scale_color_manual(name = "tipo", labels = c("atual", "previsto"), values = c("atual"="darkblue", "previsto"="darkred"))
plotly::ggplotly(arima_plot)
arima_plot <- arima %>%
ggplot() +
geom_line(aes(x=date,y=.actual, color = "darkblue")) +
geom_line(aes(x=date,y=.prediction, color = "darkred")) + theme_bw() +
ggtitle("Nascimentos previstos e atual") + labs(y ="Nascimentos(previstos vs atual)")
arima_plot <- arima %>%
ggplot() +
geom_line(aes(x=date,y=.actual, color = "darkblue")) +
geom_line(aes(x=date,y=.prediction, color = "darkred")) + theme_bw() +
ggtitle("Nascimentos previstos e atual") + labs(y ="Nascimentos(previstos vs atual)") +
theme(legend.title=element_blank())
plotly::ggplotly(arima_plot)
arima_plot <- arima %>%
ggplot() +
geom_line(aes(x=date,y=.actual, color = "darkblue")) +
geom_line(aes(x=date,y=.prediction, color = "darkred")) + theme_bw() +
ggtitle("Nascimentos previstos e atual") + labs(y ="Nascimentos(previstos vs atual)") +
theme(legend.title=element_blank()) + guides(fill=guide_legend(title=NULL))
plotly::ggplotly(arima_plot)
prophet <- prophet %>%
ggplot() +
geom_line(aes(x=date,y=.actual, color = "darkblue")) +
geom_line(aes(x=date,y=.prediction, color = "darkred")) + theme_bw() +
ggtitle("Nascimentos previstos e atual") + labs(y ="Nascimentos(previstos vs atual)") +
theme(legend.title=element_blank()) + guides(fill=guide_legend(title=NULL))
prophet <- refit_tbl[[5]][[4]]
prophet_plot <- prophet %>%
ggplot() +
geom_line(aes(x=date,y=.actual, color = "darkblue")) +
geom_line(aes(x=date,y=.prediction, color = "darkred")) + theme_bw() +
ggtitle("Nascimentos previstos e atual") + labs(y ="Nascimentos(previstos vs atual)") +
theme(legend.title=element_blank()) + guides(fill=guide_legend(title=NULL))
plotly::ggplotly(prophet_plot)
arima <- arima %>%
mutate(dia = day(date, label = TRUE))
arima <- arima %>%
mutate(dia = day(date))
?day()
arima <- arima %>%
mutate(dia = day(date, label = TRUE ))
arima <- arima %>%
mutate(dia = day(date, label = TRUE ))
arima <- arima %>%
mutate(dia = wday(date, label = TRUE ))
arima <- arima %>%
mutate(dia = wday(date, label = TRUE)) %>%
ggplot(aes(.actual,.prediction, fill=dia)) + geom_point() + geom_smooth(se=FALSE)
arima %>%
mutate(dia = wday(date, label = TRUE)) %>%
ggplot(aes(.actual,.prediction, fill=dia)) + geom_point() + geom_smooth(se=FALSE)
arima <- refit_tbl[[5]][[2]]
arima %>%
mutate(dia = wday(date, label = TRUE)) %>%
ggplot(aes(.actual,.prediction, fill=dia)) + geom_point() + geom_smooth(se=FALSE)
arima %>%
mutate(dia = wday(date, label = TRUE)) %>%
ggplot(aes(.actual,.prediction, col=dia)) + geom_point() + geom_smooth(se=FALSE)
arima %>%
mutate(dia = wday(date, label = TRUE)) %>%
ggplot(aes(.actual,.prediction)) + geom_point() + geom_smooth(se=FALSE)
arima %>%
mutate(dia = wday(date, label = TRUE)) %>%
ggplot(aes(.actual,.prediction, col = day)) + geom_point() + geom_smooth(se=FALSE)
arima %>%
mutate(dia = wday(date, label = TRUE)) %>%
ggplot(aes(.actual,.prediction, col = dia)) + geom_point() + geom_smooth(se=FALSE)
if (!require(RODBC)) { install.packages(RODBC); require(RODBC) }
dremio_host <- "200.137.215.27"
dremio_port <- "31010"
dremio_uid <- "daniel"
dremio_pwd <- "p7USWgsqaEH3CWe"
channel <- odbcDriverConnect(sprintf("DRIVER=Dremio Connector;HOST=%s;PORT=%s;UID=%s;PWD=%s;AUTHENTICATIONTYPE=Basic Authentication;CONNECTIONTYPE=Direct", dremio_host, dremio_port, dremio_uid, dremio_pwd))
nascimentos20201 <- sqlQuery(channel,"SELECT * FROM(SELECT SUBSTRING(CODMUNRES, 1, 2) AS UF, CODMUNRES, DTNASC,
COUNT(*) AS contagem FROM Dados.sinasc.preliminar.sinasc_2020
GROUP BY CODMUNRES, DTNASC)
WHERE UF = '52'", as.is=c(TRUE))
nascimentos2020 <- sqlQuery(channel,"SELECT * FROM(SELECT SUBSTRING(CODMUNRES, 1, 2) AS UF, CODMUNRES, DTNASC,
COUNT(*) AS contagem FROM Dados.sinasc.preliminar.sinasc_2020
GROUP BY CODMUNRES, DTNASC)
WHERE UF = '52'", as.is=c(TRUE))
nascimentos2021 <- sqlQuery(channel,"SELECT * FROM(SELECT SUBSTRING(CODMUNRES, 1, 2) AS UF, CODMUNRES, DTNASC,
COUNT(*) AS contagem FROM Dados.sinasc.preliminar.sinasc_2021                                                    GROUP BY CODMUNRES, DTNASC)
WHERE UF = '52'", as.is=c(TRUE))
nascimentos2021 <- sqlQuery(channel,"SELECT * FROM(SELECT SUBSTRING(CODMUNRES, 1, 2) AS UF, CODMUNRES, DTNASC,
COUNT(*) AS contagem FROM Dados.sinasc.preliminar.sinasc_2021                                                    GROUP BY CODMUNRES, DTNASC)
WHERE UF = '52'", as.is=c(TRUE))
nascimentos <- sqlQuery(channel, "SELECT * FROM(
SELECT SUBSTRING(CODMUNRES, 1, 2) AS UF, CODMUNRES, DTNASC,
COUNT(*) AS contagem FROM Dados.sinasc.DN
GROUP BY CODMUNRES, DTNASC)
WHERE UF = '52'", as.is=c(TRUE))
nascimentos_total <- rbind(nascimentos, nascimentos2020, nascimentos2021)
setwd("~/GitHub/prophet_gestantes/bases")
write.csv(nascimentos_total, "nascimentos.csv")
nascimentos <- read_csv("nascimentos.csv") %>% select(-X1)
library(tidyverse)
nascimentos <- read_csv("nascimentos.csv") %>% select(-X1)
nascimentos <- read_csv("nascimentos.csv") %>% select(-X1)
nascimentos$DTNASC <- as.Date(nascimentos$DTNASC, "%d/%m/%Y")
nascimentos <- read_csv("nascimentos.csv") %>% select(-X1)
nascimentos$DTNASC1 <- as.Date(nascimentos$DTNASC, "%d/%m/%Y")
View(nascimentos)
nascimentos$DTNASC1 <- dmY(nascimentos$DTNASC)
library(tidyverse); library(lubridate)
nascimentos$DTNASC1 <- dmy(nascimentos$DTNASC)
View(nascimentos)
nascimentos <- read_csv("nascimentos.csv") %>% select(-X1) %>% janitor::clean_names()
nascimentos$DTNASC1 <- dmy(nascimentos$DTNASC)
nascimentos$dtnasc <- dmy(nascimentos$dtnasc)
nascimentos_go <- nascimentos %>%
group_by(UF, dtnasc) %>%
summarise(total = sum(contagem))
nascimentos_go <- nascimentos %>%
group_by(uf, dtnasc) %>%
summarise(total = sum(contagem))
View(nascimentos_go)
nascimentos_go %>%
ggplot(aes(x = dtnasc, y = total)) + geom_line()
View(nascimentos_go)
nascimentos <- nascimentos %>%
mutate(mes = month(dtnasc))
nascimentos$mes_ano <- format(dtnasc, "%Y-%m")
nascimentos$mes_ano <- format(nascimentos$dtnasc, "%Y-%m")
nascimentos <- read_csv("nascimentos.csv") %>% select(-X1) %>% janitor::clean_names()
nascimentos$dtnasc <- dmy(nascimentos$dtnasc)
nascimentos$mes_ano <- format(nascimentos$dtnasc, "%Y-%m")
nascimentos$mes_ano <- as.Date(format(nascimentos$dtnasc, "%Y-%m"))
nascimentos$mes_ano <- format_ISO8601(nascimentos$dtnasc, precision = "Ym")
nascimentos$mes_ano <- format_ISO8601(nascimentos$dtnasc, precision = "ym")
nascimentos$mes_ano <- zoo::as.yearmon(nascimentos$dtnasc "%Y %m")
nascimentos$mes_ano <- zoo::as.yearmon(nascimentos$dtnasc, "%Y %m")
nascimentos_go <- nascimentos %>%
group_by(uf, mes_ano) %>%
summarise(total = sum(contagem))
nascimentos_go %>%
ggplot(aes(x = mes_ano, y = total)) + geom_line()
nascimentos_go <- nascimentos %>%
filter(dtnasc < "2021-10-01") %>%
group_by(uf, mes_ano) %>%
summarise(total = sum(contagem))
nascimentos_go %>%
ggplot(aes(x = mes_ano, y = total)) + geom_line()
nascimentos_go %>%
ggplot(aes(x = mes_ano, y = total)) + geom_line() + theme_minimal()
nascimentos_go %>%
ggplot(aes(x = mes_ano, y = total)) + geom_line(size = 2) + theme_minimal()
nascimentos_go %>%
ggplot(aes(x = mes_ano, y = total)) + geom_line(size = 1) + theme_minimal()
nascimentos_go %>%
ggplot(aes(x = mes_ano, y = total)) + geom_line(size = 0.5) +
theme_minimal()
nascimentos_go %>%
ggplot(aes(x = mes_ano, y = total)) + geom_line(size = 0.75) +
theme_minimal()
nascimentos_go %>%
ggplot(aes(x = mes_ano, y = total)) + geom_line(size = 0.70) +
theme_minimal()
nascimentos_go %>%
ggplot(aes(x = mes_ano, y = total)) + geom_line(size = 0.60) +
theme_minimal()
library(tidyverse); library(lubridate); library(modeltime)
library(tidyverse); library(lubridate); library(modeltime); library(tidymodels)
library(timetk)
nascimentos %>%
plot_time_series(mes_ano, total)
nascimentos_go %>%
plot_time_series(mes_ano, total)
splits <- time_series_split(
nascimentos_go,
assess = "6 months",
cumulative = TRUE
)
as.Date(nascimentos)
as.Date(nascimentos$mes_ano)
nascimentos <- read_csv("nascimentos.csv") %>% select(-X1) %>% janitor::clean_names()
nascimentos$dtnasc <- dmy(nascimentos$dtnasc)
# nascimentos$mes_ano <- zoo::as.yearmon(nascimentos$dtnasc, "%Y %m")
nascimentos$mes_ano <- as.Date(nascimentos$dtnasc, "%Y %m")
# nascimentos$mes_ano <- zoo::as.yearmon(nascimentos$dtnasc, "%Y %m")
nascimentos$mes_ano <- (nascimentos$dtnasc, "%Y %m")
# nascimentos$mes_ano <- zoo::as.yearmon(nascimentos$dtnasc, "%Y %m")
nascimentos$mes_ano <- format(nascimentos$dtnasc, "%Y %m")
# nascimentos$mes_ano <- zoo::as.yearmon(nascimentos$dtnasc, "%Y %m")
nascimentos$mes_ano <- format(as.Date(nascimentos$dtnasc, "%Y %m"))
# nascimentos$mes_ano <- zoo::as.yearmon(nascimentos$dtnasc, "%Y %m")
nascimentos$mes_ano <- format(nascimentos$dtnasc, "%Y-%m"))
# nascimentos$mes_ano <- zoo::as.yearmon(nascimentos$dtnasc, "%Y %m")
nascimentos$mes_ano <- format(nascimentos$dtnasc, "%Y-%m")
# nascimentos$mes_ano <- zoo::as.yearmon(nascimentos$dtnasc, "%Y %m")
nascimentos$mes_ano <- as.Date(format(nascimentos$dtnasc, "%Y-%m"))
# nascimentos$mes_ano <- zoo::as.yearmon(nascimentos$dtnasc, "%Y %m")
nascimentos$mes_ano <- as.Date(format(nascimentos$dtnasc, "%Y-%m"), "Ym")
# nascimentos$mes_ano <- zoo::as.yearmon(nascimentos$dtnasc, "%Y %m")
nascimentos$mes_ano <- as.Date(format(nascimentos$dtnasc, "%Y-%m"), "%Y-%m")
nascimentos$dtnasc <- dmy(nascimentos$dtnasc)
nascimentos <- read_csv("nascimentos.csv") %>% select(-X1) %>% janitor::clean_names()
nascimentos$dtnasc <- dmy(nascimentos$dtnasc)
nascimentos_go <- nascimentos %>%
filter(dtnasc < "2021-10-01") %>%
group_by(uf, dtnasc) %>%
summarise(total = sum(contagem))
nascimentos_go %>%
plot_time_series(mes_ano, total)
nascimentos_go %>%
plot_time_series(dtnasc, total)
splits <- time_series_split(
nascimentos_go,
assess = "6 months",
cumulative = TRUE
)
splits %>%
tk_time_series_cv_plan() %>%
plot_time_series_cv_plan(dtnasc, total)
nascimentos$mes_ano <- (as.Date(as.yearmon(nascimentos$dtnasc, "%m/%Y")))
nascimentos$mes_ano <- (as.Date(zoo::as.yearmon(nascimentos$dtnasc, "%m/%Y")))
nascimentos$mes_ano <- (as.Date(zoo::as.yearmon(nascimentos$dtnasc, "%m/%Y")), "%Y-%m")
nascimentos$mes_ano <- (as.Date(zoo::as.yearmon(nascimentos$dtnasc, "%m/%Y")), "%Y-%m")
# nascimentos$mes_ano <- zoo::as.yearmon(nascimentos$dtnasc, "%Y %m")
nascimentos$mes_ano <- as.Date(format(nascimentos$dtnasc, "%Y-%m"), "%Y-%m")
# nascimentos$mes_ano <- zoo::as.yearmon(nascimentos$dtnasc, "%Y %m")
nascimentos$mes_ano <- as.Date(format(nascimentos$dtnasc, "%Y-%m"))
model_arima <- arima_reg() %>%
set_engine("auto-arima") %>%
fit(total ~ dtnasc, training(splits))
show_engines("arima_reg")
model_arima <- arima_reg() %>%
set_engine("auto_arima") %>%
fit(total ~ dtnasc, training(splits))
model_arima
model_prophet <- prophet_reg(seasonality_yearly = TRUE) %>%
set_engine("prophet") %>%
fit(total ~ dtnasc, training(splits))
View(model_prophet)
model_prophet
model_tbl <- modeltime_table(
model_arima,
model_prophet
)
calib_tbl <- model_tbl %>%
modeltime_calibrate(testing(splits))
model_tbl <- modeltime_table(
model_arima,
model_prophet
)
calib_tbl <- model_tbl %>%
modeltime_calibrate(testing(splits))
calib_tbl %>% modeltime_accuracy()
calib_tbl %>%
modeltime_forecast(
new_data = testing(splits),
actual_data = nascimentos_go
) %>%
plot_modeltime_forecast()
calib_tbl %>%
modeltime_forecast(
new_data = testing(splits),
actual_data = nascimentos_go
) %>%
plot_modeltime_forecast(se = FALSE)
calib_tbl %>%
modeltime_forecast(
new_data = testing(splits),
actual_data = nascimentos_go
) %>%
plot_modeltime_forecast(.conf_interval_show = FALSE)
View(calib_tbl)
future_forecast_tbl <- calib_tbl %>%
modeltime_refit(nascimentos_go) %>%
modeltime_forecast(h = "24 months",
actual_data = nascimentos_go)
future_forecast_tbl %>%
plot_modeltime_forecast()
future_forecast_tbl %>%
plot_modeltime_forecast(.conf_interval_show = FALSE)
model_fit_ets <- exp_smoothing() %>%
set_engine(engine = "ets") %>%
fit(value ~ date, data = training(splits))
model_fit_ets <- exp_smoothing() %>%
set_engine(engine = "ets") %>%
fit(total ~ dtnasc, data = training(splits))
model_tbl <- modeltime_table(
model_arima,
model_prophet,
model_fit_ets
)
model_tbl <- modeltime_table(
model_arima,
model_prophet,
model_fit_ets
)
calib_tbl <- model_tbl %>%
modeltime_calibrate(testing(splits))
calib_tbl %>% modeltime_accuracy()
calib_tbl %>%
modeltime_forecast(
new_data = testing(splits),
actual_data = nascimentos_go
) %>%
plot_modeltime_forecast(.conf_interval_show = FALSE)
future_forecast_tbl <- calib_tbl %>%
modeltime_refit(nascimentos_go) %>%
modeltime_forecast(h = "24 months",
actual_data = nascimentos_go)
future_forecast_tbl %>%
plot_modeltime_forecast(.conf_interval_show = FALSE)
splits
calib_tbl %>% modeltime_accuracy()
calib_tbl %>% modeltime_accuracy()
future_forecast_tbl %>%
plot_modeltime_forecast(.conf_interval_show = FALSE)
View(future_forecast_tbl)
future_forecast_tbl %>%
filter(.model_desc == "PROPHET" | .model_desc == "ACTUAL")
calib_tbl %>%
modeltime_forecast(
new_data = testing(splits),
actual_data = nascimentos_go
) %>%
plot_modeltime_forecast(.conf_interval_show = FALSE)
View(calib_tbl)
View(calib_tbl[[2]][[2]])
View(calib_tbl[[5]][[2]])
calib_tbl[[2]][[2]]
View(calib_tbl[[5]][[2]])
calib_tbl[[5]][[2]]
prophet_treino <- calib_tbl[[5]][[2]]
View(prophet_treino)
prophet_treino %>%
ggplot(aes(x = dtnasc)) + geom_line(aes(y = .actual))
prophet_treino %>%
ggplot(aes(x = dtnasc)) + geom_line(aes(y = .actual, col = "blue"))
prophet_treino %>%
ggplot(aes(x = dtnasc)) + geom_line(aes(y = .actual), col = "blue")
prophet_treino %>%
ggplot(aes(x = dtnasc)) + geom_line(aes(y = .actual), col = "blue") +
geom_line(aes(y = .prediction), col = "red")
prophet_treino %>%
ggplot(aes(x = dtnasc)) + geom_line(aes(y = .actual), col = "blue") +
geom_line(aes(y = .prediction), col = "red") + theme_minimal()
future_forecast_tbl %>%
filter(.model_desc == "PROPHET" | .model_desc == "ACTUAL") %>%
ggplot(aes)
View(future_forecast_tbl)
future_forecast_tbl %>%
filter(.model_desc == "PROPHET" | .model_desc == "ACTUAL") %>%
filter(.index > 2019-01-01) %>%
ggplot(aes(x = .index, y = .value, col = .key)) + geom_line()
future_forecast_tbl %>%
filter(.model_desc == "PROPHET" | .model_desc == "ACTUAL") %>%
filter(.index > "2019-01-01") %>%
ggplot(aes(x = .index, y = .value, col = .key)) + geom_line()
future_forecast_tbl %>%
filter(.model_desc == "PROPHET" | .model_desc == "ACTUAL") %>%
filter(.index > "2019-01-01") %>%
ggplot(aes(x = .index, y = .value, col = .key)) + geom_line() +
theme_minimal()
future_forecast_tbl %>%
filter(.model_desc == "PROPHET" | .model_desc == "ACTUAL") %>%
filter(.index > "2019-01-01") %>%
ggplot(aes(x = .index, y = .value, col = .key)) + geom_line() +
theme_minimal() + geom_linerange()
future_forecast_tbl %>%
filter(.model_desc == "PROPHET" | .model_desc == "ACTUAL") %>%
filter(.index > "2019-01-01") %>%
ggplot(aes(x = .index, y = .value, col = .key)) + geom_line() +
theme_minimal()
nascimentos_go %>%
plot_time_series(dtnasc, total)
prophet_treino %>%
ggplot(aes(x = dtnasc)) + geom_line(aes(y = .actual), col = "blue") +
geom_line(aes(y = .prediction), col = "red") + theme_minimal()
calib_tbl %>%
modeltime_forecast(
new_data = testing(splits),
actual_data = nascimentos_go
) %>%
plot_modeltime_forecast(.conf_interval_show = FALSE)
library(tidyverse); library(lubridate); library(modeltime); library(tidymodels)
library(timetk)
setwd("~/GitHub/prophet_gestantes/bases")
nascimentos <- read_csv("nascimentos.csv") %>% select(-X1) %>% janitor::clean_names()
nascimentos$dtnasc <- dmy(nascimentos$dtnasc)
# nascimentos$mes_ano <- zoo::as.yearmon(nascimentos$dtnasc, "%Y %m")
nascimentos$mes_ano <- as.Date(format(nascimentos$dtnasc, "%Y-%m"))
nascimentos_go <- nascimentos %>%
filter(dtnasc < "2021-10-01") %>%
group_by(uf, dtnasc) %>%
summarise(total = sum(contagem))
nascimentos_go %>%
ggplot(aes(x = mes_ano, y = total)) + geom_line(size = 0.60) +
theme_minimal()
nascimentos_go %>%
plot_time_series(dtnasc, total)
# split e prophet ---------------------------------------------------------
splits <- time_series_split(
nascimentos_go,
assess = "6 months",
cumulative = TRUE
)
splits %>%
tk_time_series_cv_plan() %>%
plot_time_series_cv_plan(dtnasc, total)
splits
# modelos -----------------------------------------------------------------
model_arima <- arima_reg() %>%
set_engine("auto_arima") %>%
fit(total ~ dtnasc, training(splits))
model_prophet <- prophet_reg(seasonality_yearly = TRUE) %>%
set_engine("prophet") %>%
fit(total ~ dtnasc, training(splits))
model_fit_ets <- exp_smoothing() %>%
set_engine(engine = "ets") %>%
fit(total ~ dtnasc, data = training(splits))
model_tbl <- modeltime_table(
model_arima,
model_prophet,
model_fit_ets
)
# Calibrate ---------------------------------------------------------------
calib_tbl <- model_tbl %>%
modeltime_calibrate(testing(splits))
calib_tbl %>% modeltime_accuracy()
prophet_treino <- calib_tbl[[5]][[2]]
prophet_treino %>%
ggplot(aes(x = dtnasc)) + geom_line(aes(y = .actual), col = "blue") +
geom_line(aes(y = .prediction), col = "red") + theme_minimal()
# test set visualization --------------------------------------------------
calib_tbl %>%
modeltime_forecast(
new_data = testing(splits),
actual_data = nascimentos_go
) %>%
plot_modeltime_forecast(.conf_interval_show = FALSE)
future_forecast_tbl <- calib_tbl %>%
modeltime_refit(nascimentos_go) %>%
modeltime_forecast(h = "24 months",
actual_data = nascimentos_go)
future_forecast_tbl %>%
plot_modeltime_forecast(.conf_interval_show = FALSE)
future_forecast_tbl %>%
filter(.model_desc == "PROPHET" | .model_desc == "ACTUAL") %>%
filter(.index > "2019-01-01") %>%
ggplot(aes(x = .index, y = .value, col = .key)) + geom_line() +
theme_minimal()
View(future_forecast_tbl)
View(future_forecast_tbl)
future_forecast_tbl %>%
filter(.key == "predict")
future_forecast_tbl %>%
filter(.key == "prediction")
future_forecast_tbl %>%
filter(.key == "prediction" & .model_desc == "PROPHET")
future_forecast_tbl %>%
filter(.key == "prediction" & .model_desc == "PROPHET") %>%
mutate(mes_ano = format(.index, "%Y-%m"))
future_forecast_tbl %>%
filter(.key == "prediction" & .model_desc == "PROPHET") %>%
mutate(mes_ano = format(.index, "%Y-%m")) %>%
group_by(mes_ano) %>%
summarise(total = sum(.value))
future_forecast_tbl %>%
filter(.key == "prediction" & .model_desc == "PROPHET") %>%
mutate(mes_ano = format(.index, "%Y-%m")) %>%
group_by(mes_ano) %>%
summarise(total = sum(.value)) %>%
ggplot(aes(mes_ano, total)) + geom_line()
future_forecast_tbl %>%
filter(.key == "prediction" & .model_desc == "PROPHET") %>%
mutate(mes_ano = format(.index, "%Y-%m")) %>%
group_by(mes_ano) %>%
summarise(total = sum(.value)) %>%
ggplot(aes(mes_ano, total)) + geom_col()
total_nascimentos_previsao <-
future_forecast_tbl %>%
filter(.key == "prediction" & .model_desc == "PROPHET") %>%
mutate(mes_ano = format(.index, "%Y-%m")) %>%
group_by(mes_ano) %>%
summarise(total = sum(.value))
total_nascimentos_previsao %>%
ggplot(aes(mes_ano, total)) + geom_col()
writexl::write_xlsx(total_nascimentos_previsao, "totalnascimentos_go.xlsx")
